// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specs.Specifications.Game
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Working on an action")]
    public partial class WorkingOnAnActionFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Performing actions.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-EN"), "Working on an action", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When a villager is working on an action, the workload of this action goes down")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("US003")]
        public virtual void WhenAVillagerIsWorkingOnAnActionTheWorkloadOfThisActionGoesDown()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When a villager is working on an action, the workload of this action goes down", new string[] {
                        "US003",
                        "ignore"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "Workload"});
            table1.AddRow(new string[] {
                        "Hunt an elephant",
                        "2"});
            table1.AddRow(new string[] {
                        "Tame a demonic rodent",
                        "1"});
#line 7
 testRunner.Given("a ritual named \"Crocto\" with the following actions:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Villager"});
            table2.AddRow(new string[] {
                        "Alice"});
#line 13
 testRunner.And("a village named \"Podunk\" inhabited by", ((string)(null)), table2, "And ");
#line 17
 testRunner.And("the village \"Podunk\" must perform the \"Crocto\" ritual", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Villager",
                        "Action"});
            table3.AddRow(new string[] {
                        "Alice",
                        "Hunt an elephant"});
#line 19
 testRunner.When("the \"Podunk\" village plan for the day is:", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "workload"});
            table4.AddRow(new string[] {
                        "Hunt an elephant",
                        "1"});
            table4.AddRow(new string[] {
                        "Tame a demonic rodent",
                        "1"});
#line 23
 testRunner.Then("the \"Podunk\" village has the following remaining actions to do:", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When nobody is doing an action, the workload of this action does not vary")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("US003")]
        public virtual void WhenNobodyIsDoingAnActionTheWorkloadOfThisActionDoesNotVary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When nobody is doing an action, the workload of this action does not vary", new string[] {
                        "US003",
                        "ignore"});
#line 30
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "Workload"});
            table5.AddRow(new string[] {
                        "Hunt an elephant",
                        "2"});
#line 32
 testRunner.Given("a ritual named \"Crocto\" with the following actions:", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Villager"});
            table6.AddRow(new string[] {
                        "Alice"});
#line 36
 testRunner.And("a village named \"Podunk\" inhabited by", ((string)(null)), table6, "And ");
#line 40
 testRunner.And("the village \"Podunk\" must perform the \"Crocto\" ritual", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Villager",
                        "Action"});
#line 42
 testRunner.When("the \"Podunk\" village plan for the day is:", ((string)(null)), table7, "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "workload"});
            table8.AddRow(new string[] {
                        "Hunt an elephant",
                        "2"});
#line 45
 testRunner.Then("the \"Podunk\" village has the following remaining actions to do:", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A action is done when its workload reach 0")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("US003")]
        public virtual void AActionIsDoneWhenItsWorkloadReach0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A action is done when its workload reach 0", new string[] {
                        "US003",
                        "ignore"});
#line 52
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "Workload"});
            table9.AddRow(new string[] {
                        "Hunting an elephant",
                        "2"});
            table9.AddRow(new string[] {
                        "Summon a storm",
                        "1"});
#line 54
 testRunner.Given("a ritual named \"Crocto\" with the following actions:", ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Villager"});
            table10.AddRow(new string[] {
                        "Alice"});
#line 59
 testRunner.And("a village named \"Podunk\" inhabited by", ((string)(null)), table10, "And ");
#line 63
 testRunner.And("the village \"Podunk\" must perform the \"Crocto\" ritual", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Villager",
                        "Action"});
            table11.AddRow(new string[] {
                        "Alice",
                        "Summon a storm"});
#line 65
 testRunner.When("the \"Podunk\" village plan for the day is:", ((string)(null)), table11, "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "workload"});
            table12.AddRow(new string[] {
                        "Hunt an elephant",
                        "2"});
#line 69
 testRunner.Then("the \"Podunk\" village has the following remaining actions to do:", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
